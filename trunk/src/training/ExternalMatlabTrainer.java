package training;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;





public class ExternalMatlabTrainer implements INetTrainer {

	private String outputFolder;
	private Map<Integer, List<List<Double>>> saturationExamples;
	private Map<Integer,List<BufferedImage>> scaledImagesExamples;
	
	public ExternalMatlabTrainer(String outputFolder){
		this.outputFolder=outputFolder;
		saturationExamples=new HashMap<Integer, List<List<Double>>>();
		scaledImagesExamples=new HashMap<Integer, List<BufferedImage>>();
		for(int i=0;i<10;i++){
			saturationExamples.put(i, new ArrayList<List<Double>>());
			scaledImagesExamples.put(i,new ArrayList<BufferedImage>());
		}
	}
	
	@Override
	public void addScaledImageExample(BufferedImage image, int digit) {
		if(digit<0 || digit >9){
			throw new IllegalArgumentException("Digit must be between 0 and 9!");
		}
		scaledImagesExamples.get(digit).add(image);

	}

	@Override
	public void addSegmentSaturationExample(List<Double> saturations, int digit) {
		if(digit<0 || digit >9){
			throw new IllegalArgumentException("Digit must be between 0 and 9!");
		}
		
		if(saturations.size()!=7){
			throw new IllegalArgumentException("There must be 7 segments!");
		}
		saturationExamples.get(digit).add(saturations);
	}
	
	
	@Override
	public void startTrainingSaturation(){
		
		File learningFile7_10 =new File(outputFolder+"/learn_7_10.m");
		File learningFile7_1 =new File(outputFolder+"/learn_7_1.m");
				
		BufferedWriter learnWriter7_10=null;
		BufferedWriter learnWriter7_1=null;
		
		try {
			learnWriter7_10 = new BufferedWriter(new FileWriter(learningFile7_10));
			learnWriter7_1 = new BufferedWriter(new FileWriter(learningFile7_1));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			learnWriter7_10.write("%**************************************************%\n" +
					              "%**************************************************%\n" +
							      "% THIS IS AUTO GENERATED LEARNING SET FROM NEURAL  %\n" +
							      "% DIGITS APPLICATION, PLEASE DO NOT EDIT THIS FILE %\n" +
							      "%**************************************************%\n" +
							      "%**************************************************%\n\n");
			
			learnWriter7_1.write("%**************************************************%\n" +
							  	 "%**************************************************%\n" +
							  	 "% THIS IS AUTO GENERATED LEARNING SET FROM NEURAL  %\n" +
							  	 "% DIGITS APPLICATION, PLEASE DO NOT EDIT THIS FILE %\n" +
							  	 "%**************************************************%\n" +
					  			 "%**************************************************%\n\n");
			
			learnWriter7_10.write("P=[]\n");
			learnWriter7_10.write("T=[]\n\n");
			
			learnWriter7_1.write("P=[]\n");
			learnWriter7_1.write("T=[]\n\n");
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		List<List<Double>> tmpList7_10=null;		
		
		for(int i=0;i<10;i++){
			tmpList7_10=saturationExamples.get(i);			
			for(List<Double> example:tmpList7_10){
				try {
					write7_10ExamplesToFile(example, i, learnWriter7_10);
					write7_1ExamplesToFile(example, i, learnWriter7_1);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		try {
			learnWriter7_10.flush();
			learnWriter7_10.close();	
			
			learnWriter7_1.flush();
			learnWriter7_1.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
	}
	
	@Override
	public void startTrainingScaled(){
		
	}
	
	private void write7_10ExamplesToFile(List<Double> example, int digit, BufferedWriter writer) throws IOException{
		
		writer.write("p=[");
		for(int i=0;i<8;i++){
			Double number=example.get(i);
			writer.write(""+number);
			if(i<7)writer.write(",");
		}
		writer.write("];\n");
		writer.write("P=[P p];\n");
		writer.write("t=[");
		for(int i=0;i<10;i++){
			if(i==digit){
				writer.write("1");				
			} else{
				writer.write("0");
			}
			if(i<9)writer.write(",");			
		}
		writer.write("];\n");
		writer.write("T=[T t];\n\n");		
	}
	
private void write7_1ExamplesToFile(List<Double> example, int digit, BufferedWriter writer) throws IOException{
		
		writer.write("p=[");
		for(int i=0;i<8;i++){
			Double number=example.get(i);
			writer.write(""+number);
			if(i<7)writer.write(",");
		}
		writer.write("];\n");
		writer.write("P=[P p];\n");
		writer.write("t="+digit+";\n");
		
		writer.write("T=[T t];\n\n");
		
	}

}
